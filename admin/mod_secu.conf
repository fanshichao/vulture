### mod_security config for app "{{appname}}"
{% if version and "/" not in appname %}
# Specify CRS version in the audit logs
SecComponentSignature "core ruleset/{{version}}"
{% endif %}

{% if action == 'Log_Only' %}
# Process rules, but no transaction interception
SecRuleEngine DetectionOnly
SecDefaultAction "phase:2,pass,nolog,auditlog"
{% else %}{% if action == 'Log_Block' %}
# Process rules
SecRuleEngine On
SecAuditEngine RelevantOnly
SecDefaultAction "phase:2,deny,nolog,auditlog"
{% endif %}{% endif %}

{% if motor == 'Anomaly' %}
# use anomaly scoring mode
SecAction "phase:1,id:'981206',t:none,nolog,pass,setvar:tx.anomaly_score_blocking=on"
SecAction "phase:1,id:'981207',t:none,nolog,pass,setvar:tx.critical_anomaly_score={{critical_score}},setvar:tx.error_anomaly_score={{error_score}},setvar:tx.warning_anomaly_score={{warning_score}},setvar:tx.notice_anomaly_score={{notice_score}}"
SecAction "phase:1,id:'981208',t:none,nolog,pass,setvar:tx.inbound_anomaly_score_level={{inbound_score}}"
SecAction "phase:1,id:'981209',t:none,nolog,pass,setvar:tx.outbound_anomaly_score_level={{outbound_score}}"
{% endif %}

{% if paranoid %}
# use paranoid mode
SecAction "phase:1,id:'981210',t:none,nolog,pass,setvar:tx.paranoid_mode=1"
{% endif %}

{% if UTF %}
# validate utf8 encoding
SecAction "phase:1,id:'981216',t:none,nolog,pass,setvar:tx.crs_validate_utf8_encoding=1"
{% endif %}

{% if XML %}
# process xml
SecRule REQUEST_HEADERS:Content-Type "text/xml" "chain,phase:1,id:'981053',t:none,t:lowercase,pass,nolog"
SecRule REQBODY_PROCESSOR "!@streq XML" "ctl:requestBodyProcessor=XML"
{% endif %}

{% if BodyAccess %}
SecRequestBodyAccess On
{% endif %}

{% if max_num_args %}
SecAction "phase:1,id:'981211',t:none,nolog,pass,setvar:tx.max_num_args={{max_num_args}}"
{% else %}
#SecAction "phase:1,id:'981211',t:none,nolog,pass,setvar:tx.max_num_args="
{% endif %}

{% if arg_name_length %}
SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_name_length={{arg_name_length}}"
{% else %}
#SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_name_length=100"
{% endif %}

{% if arg_length %}
SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_length={{arg_length}}"
{% else %}
#SecAction "phase:1,t:none,nolog,pass,setvar:tx.arg_length=400"
{% endif %}

{% if total_arg_length %}
SecAction "phase:1,t:none,nolog,pass,setvar:tx.total_arg_length={{total_arg_length}}"
{% else %}
#SecAction "phase:1,t:none,nolog,pass,setvar:tx.total_arg_length=64000"
{% endif %}

{% if max_file_size %}
SecAction "phase:1,t:none,nolog,pass,setvar:tx.max_file_size={{max_file_size}}"
{% else %}
#SecAction "phase:1,t:none,nolog,pass,setvar:tx.max_file_size=1048576"
{% endif %}

{% if combined_file_size %}
SecAction "phase:1,t:none,nolog,pass,setvar:tx.combined_file_sizes={{combined_file_size}}"
{% else %}
#SecAction "phase:1,t:none,nolog,pass,setvar:tx.combined_file_sizes=1048576"
{% endif %}

{% if allowed_http %}
# allowed/restricted HTTP methods, versions, request_content_types,
#                           headers, extensions
SecAction "phase:1,id:'981212',t:none,nolog,pass, setvar:'tx.allowed_methods={{allowed_http}}', setvar:'tx.allowed_request_content_type={{allowed_content_type}}', setvar:'tx.allowed_http_versions={{allowed_http_version}}', setvar:'tx.restricted_extensions={{restricted_extensions}}', setvar:'tx.restricted_headers={{restricted_headers}}'"
{% endif %}

{% if BT_activated %}
SecAction "phase:1,id:'981214',t:none,nolog,pass, setvar:'tx.brute_force_protected_urls={{protected_urls}}', setvar:'tx.brute_force_burst_time_slice={{BT_burst_time_slice}}', setvar:'tx.brute_force_counter_threshold={{BT_counter_threshold}}', setvar:'tx.brute_force_block_timeout={{BT_block_timeout}}'"
{% endif %}

{% if DoS_activated %}
SecAction "phase:1,id:'981215',t:none,nolog,pass, setvar:'tx.dos_burst_time_slice={{DoS_burst_time_slice}}', setvar:'tx.dos_counter_threshold={{DoS_counter_threshold}}', setvar:'tx.dos_block_timeout={{DoS_block_timeout}}'"
{% endif %}

{% if Custom %}
{{Custom|safe}}
{% endif %}

SecRule REQUEST_HEADERS:User-Agent "^(.*)$" "phase:1,id:'981217',t:none,pass,nolog,t:sha1,t:hexEncode,setvar:tx.ua_hash=%{matched_var}"

SecRule REQUEST_HEADERS:x-forwarded-for "^\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b" "phase:1,id:'981225',t:none,pass,nolog,capture,setvar:tx.real_ip=%{tx.1}"
SecRule &TX:REAL_IP "!@eq 0" "phase:1,id:'981226',t:none,pass,nolog,initcol:global=global,initcol:ip=%{tx.real_ip}_%{tx.ua_hash}"
SecRule &TX:REAL_IP "@eq 0"  "phase:1,id:'981218',t:none,pass,nolog,initcol:global=global,initcol:ip=%{remote_addr}_%{tx.ua_hash}"
 
