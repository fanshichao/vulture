from django.conf.urls.defaults import *
from vulture.models import *
from django.contrib import admin
from vulture.views import *

admin.autodiscover()

urlpatterns = patterns('',
  (r'^accounts/login/$',                      'vulture.views.logon'),
  (r'^user/(?P<object_id>\d+)/$',             'vulture.views.vulture_update_object_adm', {'model': User}),
  (r'^user/new/$',                            'vulture.views.vulture_create_object_adm', {'model': User}),
  (r'^user/(?P<object_id>\d+)/del/$',         'vulture.views.vulture_delete_object_adm', dict({'model': User}, post_delete_redirect='/user/')),
  (r'^app/$',                                 'vulture.views.vulture_object_list_adm', dict({'queryset': App.objects.all()}, allow_empty=1)),
  (r'^app/(?P<object_id>\d+)/$',              'vulture.views.edit_app'),
  (r'^app/new/$',                             'vulture.views.edit_app'),
  (r'^app/(?P<object_id>\d+)/del/$',          'vulture.views.vulture_delete_object_adm', dict({'model': App}, post_delete_redirect='/app/')),
  (r'^app/(?P<object_id>\d+)/start/$',        'vulture.views.start_app'),
  (r'^app/(?P<object_id>\d+)/stop/$',         'vulture.views.stop_app'),
  (r'^sso/$',                                 'vulture.views.vulture_object_list_adm', dict({'queryset': SSO.objects.filter(type = 'sso_forward')}, allow_empty=1)),
  (r'^sso/(?P<object_id>\d+)/$',              'vulture.views.edit_sso'),
  (r'^sso/new/$',                             'vulture.views.edit_sso'),
  (r'^sso/(?P<object_id>\d+)/del/$',          'vulture.views.vulture_delete_object_adm', dict({'model' : SSO}, post_delete_redirect='/sso/')),
  (r'^intf/$',                                'vulture.views.vulture_object_list_adm', dict({'queryset': Intf.objects.all()}, allow_empty=1)),
  (r'^intf/(?P<object_id>\d+)/$',             'vulture.views.vulture_update_object_adm', {'model': Intf}),
  (r'^intf/new/$',                            'vulture.views.vulture_create_object_adm', {'model': Intf}),
  (r'^intf/(?P<object_id>\d+)/del/$',         'vulture.views.vulture_delete_object_adm', dict({'model': Intf}, post_delete_redirect='/intf/')),
  (r'^intf/(?P<intf_id>\d+)/start/$',         'vulture.views.start_intf'),
  (r'^intf/(?P<intf_id>\d+)/stop/$',          'vulture.views.stop_intf'),
  (r'^intf/(?P<intf_id>\d+)/reload/$',        'vulture.views.reload_intf'),
  (r'^sql/$',                                 'vulture.views.vulture_object_list_adm', dict({'queryset': SQL.objects.all()}, allow_empty=1)),
  (r'^(?P<url>sql)/(?P<object_id>\d+)/$',     'vulture.views.edit_auth'),
  (r'^(?P<url>sql)/new/$',                    'vulture.views.edit_auth'),
  (r'^(?P<url>sql)/(?P<object_id>\d+)/del/$', 'vulture.views.remove_auth'),
  (r'^radius/$',                              'vulture.views.vulture_object_list_adm', dict({'queryset': RADIUS.objects.all()}, allow_empty=1)),
  (r'^(?P<url>radius)/(?P<object_id>\d+)/$',  'vulture.views.edit_auth'),
  (r'^(?P<url>radius)/new/$',                      'vulture.views.edit_auth'),
  (r'^(?P<url>radius)/(?P<object_id>\d+)/del/$',   'vulture.views.remove_auth'),
  (r'^kerberos/$',                                 'vulture.views.vulture_object_list_adm', dict({'queryset': Kerberos.objects.all()}, allow_empty=1)),
  (r'^(?P<url>kerberos)/(?P<object_id>\d+)/$',     'vulture.views.edit_auth'),
  (r'^(?P<url>kerberos)/new/$',                    'vulture.views.edit_auth'),
  (r'^(?P<url>kerberos)/(?P<object_id>\d+)/del/$', 'vulture.views.remove_auth'),
  (r'^ssl/$',                                 'vulture.views.vulture_object_list_adm', dict({'queryset': SSL.objects.all()}, allow_empty=1)),
  (r'^(?P<url>ssl)/(?P<object_id>\d+)/$',     'vulture.views.edit_auth'),
  (r'^(?P<url>ssl)/new/$',                    'vulture.views.edit_auth'),
  (r'^(?P<url>ssl)/(?P<object_id>\d+)/del/$', 'vulture.views.remove_auth'),
  (r'^acl/$',                                 'vulture.views.vulture_object_list_adm', dict({'queryset': ACL.objects.all()}, allow_empty=1)),
  (r'^acl/(?P<object_id>\d+)/$',              'vulture.views.edit_acl'),
  (r'^acl/new/$',                             'vulture.views.edit_acl'),
  (r'^acl/(?P<object_id>\d+)/del/$',          'vulture.views.vulture_delete_object_adm', dict({'model': ACL}, post_delete_redirect='/acl/')),
  (r'^ssl/(?P<object_id>\d+)/del/$',          'vulture.views.vulture_delete_object_adm', dict({'model': SSL}, post_delete_redirect='/ssl/')),
  (r'^ntlm/$',                                'vulture.views.vulture_object_list_adm', dict({'queryset': NTLM.objects.all()}, allow_empty=1)),
  (r'^(?P<url>ntlm)/(?P<object_id>\d+)/$',    'vulture.views.edit_auth'),
  (r'^(?P<url>ntlm)/new/$',                   'vulture.views.edit_auth'),
  (r'^(?P<url>ntlm)/(?P<object_id>\d+)/del/$','vulture.views.remove_auth'),
  (r'^/?$',                                   'vulture.views.vulture_object_list_adm', {'queryset': User.objects.all()}),
  (r'^logon/$',                               'vulture.views.logon'),
  (r'^logout/$',                              'logout'),
  (r'^logon/None$',                           'vulture.views.vulture_object_list_adm', dict({'queryset': User.objects.all()}, allow_empty=1)),
  (r'^user/$',                                'vulture.views.vulture_object_list_adm', {'queryset': User.objects.all()}),
  (r'^log/$',                                 'vulture.views.vulture_object_list_adm', {'queryset': Log.objects.all()}),
  (r'^log/(?P<object_id>\d+)/$',              'vulture.views.vulture_update_object_adm', {'model': Log}),
  (r'^log/new/$',                             'vulture.views.vulture_create_object_adm', {'model': Log}),
  (r'^log/(?P<object_id>\d+)/del/$',          'vulture.views.vulture_delete_object_adm', dict({'model': Log}, post_delete_redirect='/log/')),
  (r'^security/$',                            'vulture.views.vulture_object_list_adm', dict({'queryset': ModSecurity.objects.all()}, allow_empty=1)),
  (r'^security/(?P<object_id>\d+)/$',         'vulture.views.vulture_update_object_adm', {'model': ModSecurity}),
  (r'^security/new/$',                        'vulture.views.vulture_create_object_adm', {'model': ModSecurity}),
  (r'^security/update/$',                     'vulture.views.update_security'),
  (r'^security/(?P<object_id>\d+)/del/$',     'vulture.views.vulture_delete_object_adm', dict({'model': ModSecurity}, post_delete_redirect='/security/')),
  (r'^ldap/$',                                'vulture.views.vulture_object_list_adm', {'queryset': LDAP.objects.all()}),
  (r'^(?P<url>ldap)/(?P<object_id>\d+)/edit/$','vulture.views.edit_auth'),
  (r'^(?P<url>ldap)/new/$',                   'vulture.views.edit_auth'),
  (r'^(?P<url>ldap)/(?P<object_id>\d+)/del/$','vulture.views.remove_auth'),
  (r'^ldap_mail_lookup/$',                    'vulture.views.ldap_mail_lookup'),
  (r'^ldap_cn_lookup/$',                      'vulture.views.ldap_cn_lookup'),
  (r'^map_uri/$',                             'vulture.views.vulture_object_list_adm', dict({'queryset': MapURI.objects.all()}, allow_empty=1)),
  (r'^map_uri/(?P<object_id>\d+)/$',          'vulture.views.edit_plugin'),
  (r'^map_uri/new/$',                         'vulture.views.edit_plugin'),
  (r'^map_uri/(?P<object_id>\d+)/del/$',      'vulture.views.vulture_delete_object_adm', dict({'model': MapURI}, post_delete_redirect='/map_uri/')),
  (r'^style_style/$',                         'vulture.views.vulture_object_list_adm', dict({'queryset': Style.objects.all()}, allow_empty=1)),
  (r'^style_style/(?P<object_id>\d+)/$',      'vulture.views.vulture_update_object_adm', dict({'model': Style}, post_save_redirect='/style_style/')),
  (r'^style_style/new/$',                     'vulture.views.vulture_create_object_adm', dict({'model': Style}, post_save_redirect='/style_style/')),
  (r'^style_style/(?P<object_id>\d+)/del/$',  'vulture.views.vulture_delete_object_adm', dict({'model': Style}, post_delete_redirect='/style_style/')),
  (r'^style_css/$',                           'vulture.views.vulture_object_list_adm', dict({'queryset': CSS.objects.all()}, allow_empty=1)),
  (r'^style_css/(?P<object_id>\d+)/$',        'vulture.views.vulture_update_object_adm', dict({'model': CSS}, post_save_redirect='/style_css/')),
  (r'^style_css/new/$',                       'vulture.views.vulture_create_object_adm', dict({'model': CSS}, post_save_redirect='/style_css/')),
  (r'^style_css/(?P<object_id>\d+)/del/$',    'vulture.views.vulture_delete_object_adm', dict({'model': CSS}, post_delete_redirect='/style_css/')),
  (r'^style_tpl/$',                           'vulture.views.vulture_object_list_adm', dict({'queryset': TPL.objects.all()}, allow_empty=1)),
  (r'^style_tpl/(?P<object_id>\d+)/$',        'vulture.views.vulture_update_object_adm', dict({'model': TPL}, post_save_redirect='/style_tpl/')),
  (r'^style_tpl/new/$',                       'vulture.views.vulture_create_object_adm', dict({'model': TPL}, post_save_redirect='/style_tpl/')),
  (r'^style_tpl/(?P<object_id>\d+)/del/$',    'vulture.views.vulture_delete_object_adm', dict({'model': TPL}, post_delete_redirect='/style_tpl/')),
  (r'^style_images/$',                        'vulture.views.vulture_object_list_adm', dict({'queryset': Image.objects.all()}, allow_empty=1)),
  (r'^style_images/(?P<object_id>\d+)/$',     'vulture.views.vulture_update_object_adm', dict({'model': Image}, post_save_redirect='/style_images/')),
  (r'^style_images/new/$',                    'vulture.views.vulture_create_object_adm', dict({'model': Image}, post_save_redirect='/style_images/')),
  (r'^style_images/(?P<object_id>\d+)/del/$', 'vulture.views.vulture_delete_object_adm', dict({'model': Image}, post_delete_redirect='/style_images/')),
  (r'^style_translation/$',                   'vulture.views.vulture_object_list_adm', dict({'queryset': Translation.objects.all().order_by('country')}, allow_empty=1)),
  (r'^style_translation/(?P<object_id>\d+)/$',  'vulture.views.edit_translation'),
  (r'^style_translation/new/$',                 'vulture.views.edit_translation'),
  (r'^style_translation/(?P<object_id>\d+)/del/$',      'vulture.views.vulture_delete_object_adm', dict({'model': Translation}, post_delete_redirect='/style_translation/')),
  (r'^img/(.*)$',                             'django.views.static.serve',                  {'document_root': 'img'}),
  (r'^css/(.*)$',                             'django.views.static.serve',                  {'document_root': 'css'}),
  (r'^js/(.*)$',                              'django.views.static.serve',                  {'document_root': 'js'}),
)
