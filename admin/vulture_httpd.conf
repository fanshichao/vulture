ServerRoot {{ serverroot }}

ServerName localhost

ServerTokens Prod
ServerSignature Off

Timeout 300
KeepAlive On
MaxKeepAliveRequests 100
KeepAliveTimeout 15

StartServers            5
MinSpareServers         5
MaxSpareServers         10
MaxClients              150
MaxRequestsPerChild     1000

PidFile {{ VultureConfPath }}{{ intf.id }}.pid

user {{ www_user }}
group {{ www_user }}

LoadFile			/usr/lib/libxml2.so.2
LoadModule perl_module		{{ serverroot }}/modules/mod_perl.so
{{ httpd_custom|safe }}
## Mod security rules
{% if app.security.all %}
    LoadModule security2_module     /opt/vulture/lib/mod_security2.so\n\
{% endif %}

PerlSwitches {{ PerlSwitches }}

BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0
BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully
BrowserMatch "^WebDrive" redirect-carefully
BrowserMatch "^gnome-vfs" redirect-carefully
BrowserMatch "^WebDAVFS" redirect-carefully

AddDefaultCharset off

PerlOptions +GlobalRequest
PerlModule Apache2::Reload
PerlInitHandler Apache2::Reload

PerlSetVar ReloadAll			Off

PerlSetVar VultureDSNv3			dbi:SQLite:dbname={{ dbname }}
PerlSetVar VultureID			{{ intf.id }}
PerlSetVar VultureAppCookieName		vulture_app
PerlSetVar VultureProxyCookieName	vulture_proxy
PerlSetVar VultureConfPath          {{ VultureConfPath }}
PerlSetVar VultureStaticPath        {{ VultureStaticPath }}

Listen {{ intf.ip }}:{{ intf.port }}
NameVirtualHost {{ intf.ip }}:{{ intf.port }}

LogLevel warn

LogLevel {{ intf.log.level|safe }}
ErrorLog {{ intf.log.dir|safe }}Vulture-{{ intf.ip|safe }}-error_log

{% if ssl %}
    SSLSessionCache dbm:{{ VultureConfPath }}{{ intf.id }}.sslcache
    SSLRandomSeed startup builtin
    SSLRandomSeed connect builtin
{% endif %}

## Custom defined virtualhost directives for intf
{{ intf.virtualhost_directives|safe }}

SetEnvIf Remote_Addr "127.0.0.1" local
SetEnvIf Remote_Addr "::1" local
SetEnvIf Remote_Addr {{ intf.ip|safe }} local

{% for app in app_list %}
    <VirtualHost {{ intf.ip|safe }}:{{ intf.port|safe }}>
        ServerName {{ app.name|safe }}
		{% if app.alias %}
		ServerAlias {{ app.alias|safe }}
		{% endif %}
        LogLevel {{ app.log.level|safe }}
        LogFormat {{ app.log.format|safe }} vultureFormat
        ErrorLog {{ app.log.dir|safe }}Vulture-{{ app.name|safe }}-error_log
        CustomLog {{ app.log.dir|safe }}Vulture-{{ app.name|safe }}-access_log vultureFormat env=!local

        SSLProxyEngine On

        {% if app.remote_proxy %}
            ProxyRemote * {{ app.remote_proxy }}
            AllowCONNECT 443
        {% endif %}
        
        {% if app.isWildCard or app.hasHeaderHost %}
            ProxyPreserveHost On
        {% endif %}
        
        {% if app.remote_proxy_SSLProxyMachineCertificateFile %}
            SSLProxyMachineCertificateFile {{ app.remote_proxy_SSLProxyMachineCertificateFile }}
        {% endif %}
        {% if app.remote_proxy_SSLProxyCACertificateFile %}
            SSLProxyCACertificateFile {{ app.remote_proxy_SSLProxyCACertificateFile }}
        {% endif %}
        {% if app.remote_proxy_SSLProxyCARevocationFile %}
            SSLProxyCARevocationFile  {{ app.remote_proxy_SSLProxyCARevocationFile }}
        {% endif %}
        {% if app.remote_proxy_SSLProxyVerify %}
            SSLProxyVerify {{ app.remote_proxy_SSLProxyVerify }}
        {% endif %}

        SetHandler perl-script
        <Location />
            PerlAuthenHandler Core::AuthenHandler
            PerlAuthzHandler  Core::AuthzHandler
            AuthType basic
            AuthName "Please Authenticate"
            Require valid-user
        </Location>

        {% if intf.hasBlackIp %}
            PerlPreConnectionHandler Core::PreConnectionHandler
        {% endif %}
        PerlTransHandler Core::TransHandlerv2
        {% if app.hasBlackIp %}
        PerlAccessHandler Core::AccessHandler
        {% endif %}
        PerlFixupHandler Core::FixupHandler
        PerlResponseHandler Core::ResponseHandlerv2

        {% if intf.cert %}
            SSLEngine               On
            PerlModule              Apache::SSLLookup

            {% if intf.ssl_engine %} 
                SSLCryptoDevice {{ intf.ssl_engine }}
            {% endif %}
            SSLCertificateKeyFile   {{ VultureConfPath }}{{ intf.id }}.key
            SSLCertificateFile      {{ VultureConfPath }}{{ intf.id }}.crt
            {% if intf.ca %}
                SSLCertificateChainFile {{ VultureConfPath }}{{ intf.id }}.chain
            {% endif %}
            {% if intf.cacert %}
                SSLCACertificateFile {{ VultureConfPath }}{{ intf.id}}.cacrt
            {% endif %}

            {% for auth in app.auth.all %}
                {% if auth.is_ssl %}
                    SSLCACertificateFile {{ VultureConfPath }}{{ intf.id }}-{{ app.name }}.ca
                {% endif %}
            {% endfor %}
            SSLOptions              +StdEnvVars
        {% endif %}

        ## Mod security rules
        {% if app.security.all %}
            SecWebAppId {{ app.name }}
            SecAuditLog {{ app.log.dir|safe }}/Vulture-{{ app.name }}-security_log

            SecComponentSignature "core ruleset/2.2.1"

            SecRule REQUEST_HEADERS:User-Agent "^(.*)$" "phase:1,id:'981217',t:none,pass,nolog,t:sha1,t:hexEncode,setvar:tx.ua_hash=%{matched_var}"
            SecRule REQUEST_HEADERS:x-forwarded-for "^\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b" "phase:1,id:'981225',t:none,pass,nolog,capture,setvar:tx.real_ip=%{tx.1}"
            SecRule &TX:REAL_IP "!@eq 0" "phase:1,id:'981226',t:none,pass,nolog,initcol:global=global,initcol:ip=%{tx.real_ip}_%{tx.ua_hash}"
            SecRule &TX:REAL_IP "@eq 0"  "phase:1,id:'981218',t:none,pass,nolog,initcol:global=global,initcol:ip=%{remote_addr}_%{tx.ua_hash}"

            {% for row in app.security.all %}
                {{ row.rules|safe }}
            {% endfor %}
        {% endif %}

        ProxyRequests Off
        ProxyVia Off
        ProxyPass	 / {{ app.url }}/
        ProxyPassReverse / {{ app.url }}/
        {{ app.getCookieDomain }}

        <Proxy *>
            SetHandler perl-script

            {% for auth in app.auth.all %}
                {% if auth.is_ssl %}
                    {{ auth.getAuth.constraint }}
                {% endif %}
            {% endfor %}
        </Proxy>

        ## Custom defined virtualhost directives for app
        {{ app.virtualhost_directives|safe }}
        
    </VirtualHost>
{% endfor %}
