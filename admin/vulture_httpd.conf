#######################################
# This file was generated by Vulture  #
# Do not edit manually                # 
#######################################

# Configuration for interface "{{intf.name}}"

{% load split %}
ServerRoot {{ serverroot }}
ServerName localhost

ServerTokens Prod
ServerSignature Off

Timeout {{intf.srv_timeout}}
{% if intf.srv_ka %}
KeepAlive On
MaxKeepAliveRequests {{intf.srv_ka_max_req}}
KeepAliveTimeout {{intf.srv_ka_timeout}}
{% else %}
KeepAlive Off
{% endif %}

<IfModule mpm_prefork_module>
    StartServers        {{intf.srv_startsrv}}
    MinSpareServers     {{intf.srv_min_spare_srv}}
    MaxSpareServers     {{intf.srv_max_spare_srv}}
    MaxClients          {{intf.srv_max_clients}}
    MaxRequestsPerChild {{intf.srv_max_req_per_child}}
</IfModule>

PidFile {{ VultureConfPath }}{{ intf.id }}.pid

user {% if intf.srv_apache_user %}{{ intf.srv_apache_user }}{% else %}{{ www_user }}{% endif %}
group {% if intf.srv_apache_group %}{{ intf.srv_apache_group }}{% else %}{{ www_group }}{% endif %}

{% if httpd_custom %}#### custom conf for this distrib 
{{httpd_custom|safe}}{%endif%}
# Modules always loaded in apache
<IfModule !perl_module>
    LoadModule perl_module          {{ serverroot }}/modules/mod_perl.so
</IfModule>
<IfModule !apreq_module>
    LoadModule apreq_module    {{ serverroot }}/modules/mod_apreq2.so
</IfModule>
<IfModule !env_module>
    LoadModule env_module           {{ serverroot }}/modules/mod_env.so
</IfModule>
<IfModule !headers_module>
    LoadModule headers_module       {{serverroot}}/modules/mod_headers.so
</IfModule>
<IfModule !unique_id_module>
    LoadModule unique_id_module     {{serverroot}}/modules/mod_unique_id.so
</IfModule>
<IfModule !setenvif_module>
    LoadModule setenvif_module      {{ serverroot }}/modules/mod_setenvif.so
</IfModule>
<IfModule !alias_module>
    LoadModule alias_module         {{ serverroot }}/modules/mod_alias.so
</IfModule>
<IfModule !log_config_module>
    LoadModule log_config_module    {{ serverroot }}/modules/mod_log_config.so
</IfModule>
<IfModule !authz_host_module>
  LoadModule authz_host_module    {{ serverroot }}/modules/mod_authz_host.so
</IfModule>
<IfModule !proxy_module>
    LoadModule proxy_module         {{ serverroot }}/modules/mod_proxy.so
</IfModule>
<IfModule !proxy_http_module> 
  LoadModule proxy_http_module    {{ serverroot }}/modules/mod_proxy_http.so
</IfModule>
<IfModule !proxy_connect_module>
  LoadModule proxy_connect_module {{ serverroot }}/modules/mod_proxy_connect.so
</IfModule>
<IfModule !ssl_module>
    LoadModule ssl_module           {{ serverroot }}/modules/mod_ssl.so
</IfModule>
<IfModule mod_mime.c>
        TypesConfig mime.types
</IfModule>

# Modules we load only when configuration requires it
{% if intf.has_deflate %}<IfModule !deflate_module>
    LoadModule deflate_module       {{serverroot}}/modules/mod_deflate.so
</IfModule>{% endif %}
{% if intf.has_balancer %}<IfModule !proxy_balancer_module>
    LoadModule proxy_balancer_module    {{ serverroot }}/modules/mod_proxy_balancer.so
</IfModule>{% endif %}
{% if intf.has_mod_secu %}<IfModule !security2_module>
    LoadModule security2_module {% if MS_path.value %} {{ MS_path.value }} {% else %} {{ serverroot }}/modules/mod_security2.so {% endif %}
    LoadFile /usr/lib{% if arch64 %}64{% endif %}/libxml2.so.2
</IfModule>
SecDataDir {{ VultureConfPath }}security-rules/{% endif %}
{% if intf.has_ftp %}<IfModule !proxy_ftp_module>
    LoadModule proxy_ftp_module     {{ serverroot }}/modules/mod_proxy_ftp.so
</IfModule>{% endif %}
{% if intf.hasJK %} <IfModule !jk_module>
    LoadModule  jk_module {{ serverroot }}/modules/mod_jk.so
JkWorkersFile {{ VultureConfPath }}worker.properties
JkLogFile {{ intf.log.dir|safe }}Vulture-mod-jk.log
JkLogLevel {{ intf.log.level|safe }}
</IfModule>{% endif %}
{% if intf.has_cache %} <IfModule !cache_module>
    LoadModule cache_module      {{ serverroot }}/modules/mod_cache.so
    {% if intf.has_disk_cache %} <IfModule !disk_cache_module>
        LoadModule disk_cache_module {{ serverroot }}/modules/mod_disk_cache.so
    </IfModule>
        CacheRoot {{ intf.cache_root }}
        CacheDirLevels {{ intf.cache_dir_level }}
        CacheDirLength {{ intf.cache_dir_length }}
        CacheMaxFileSize {{ intf.cache_max_file_size }}
        CacheMinFileSize {{ intf.cache_min_file_size }}
    {% endif %}
    {% if intf.has_mem_cache %} <IfModule !mem_cache_module>
        LoadModule mem_cache_module {{ serverroot }}/modules/mod_mem_cache.so
    </IfModule>
        MCacheMaxObjectCount {{ intf.mcache_max_object_count }}
        MCacheMaxObjectSize {{ intf.mcache_max_object_size }}
        {% if intf.mcache_max_streaming_buffer %}MCacheMaxStreamingBuffer {{ intf.mcache_max_streaming_buffer }}{% endif %}
        MCacheMinObjectSize {{ intf.mcache_min_object_size }}
        MCacheRemovalAlgorithm {{ intf.mcache_removal_algorithm }}
        MCacheSize {{intf.mcache_size }}
    {% endif %}
</IfModule>{% endif %}

PerlSwitches {{ PerlSwitches }}

BrowserMatch "Mozilla/2" nokeepalive
BrowserMatch "MSIE 4\.0b2;" nokeepalive downgrade-1.0 force-response-1.0
BrowserMatch "RealPlayer 4\.0" force-response-1.0
BrowserMatch "Java/1\.0" force-response-1.0
BrowserMatch "JDK/1\.0" force-response-1.0
BrowserMatch "Microsoft Data Access Internet Publishing Provider" redirect-carefully nokeepalive
BrowserMatch "^WebDrive" redirect-carefully
BrowserMatch "^gnome-vfs" redirect-carefully
BrowserMatch "^WebDAVFS" redirect-carefully

AddDefaultCharset off

PerlOptions +GlobalRequest
PerlModule Apache2::Reload
PerlInitHandler Apache2::Reload

PerlSetVar ReloadAll                    Off

PerlSetVar VultureDSNv3                 dbi:SQLite:dbname={{ dbname }}
PerlSetVar VultureID                    {{ intf.id }}
PerlSetVar VultureAppCookieName         vulture_app
PerlSetVar VultureProxyCookieName       vulture_proxy
PerlSetVar VultureConfPath          {{ VultureConfPath }}
PerlSetVar VultureStaticPath        {{ VultureStaticPath }}

PerlPostConfigRequire               {{ VultureBinPath}}startup.pl

Listen {{ intf.ip }}:{{ intf.port }}
NameVirtualHost {{ intf.ip }}:{{ intf.port }}

LogLevel warn
LogLevel {{ intf.log.level|safe }}
ErrorLog {{ intf.log.dir|safe }}Vulture-{{ intf.ip|safe }}-error_log

{% if intf.is_ssl %} ###### SSL config for {{intf.name}} #####
    SSLSessionCache dbm:{{ VultureConfPath }}{{ intf.id }}.sslcache
    SSLRandomSeed startup file:/dev/urandom 1024
    SSLRandomSeed connect builtin
    SSLCipherSuite ALL:!ADH:RC4+RSA:+HIGH:+MEDIUM:!LOW:!SSLv2:!EXPORT {% endif %}
{% if intf.virtualhost_directives %} ### Custom directives for {{intf.name}} ###
{{ intf.virtualhost_directives|safe }} {% endif %}

SetEnvIf Remote_Addr "127.0.0.1" local
SetEnvIf Remote_Addr "::1" local
SetEnvIf Remote_Addr {{ intf.ip|safe }} local

{% for name,a in app_list.items %}
# Configuration for app "{{name}}"
    <VirtualHost {{ intf.ip|safe }}:{{ intf.port|safe }}>
        ServerName {{ name }} {% if a.0.alias %}
    	ServerAlias {{ a.0.alias }} {% endif %}
        LogLevel {{ a.0.log.level|safe }}
        LogFormat {{ a.0.log.format|safe }} vultureFormat
        ErrorLog {{ a.0.log.dir|safe }}Vulture-{{ a.0.name|cut:"/" }}-error_log
        CustomLog {{ a.0.log.dir|safe }}Vulture-{{ a.0.name|cut:"/" }}-access_log vultureFormat env=!local
        SSLProxyEngine On
        {% if a.0.isFtp %}SetEnv force-proxy-request-1.0 1
        SetEnv proxy-nokeepalive 1 {% endif %}
        {% if a.0.remote_proxy %}ProxyRemote * {{ a.0.remote_proxy }}
        AllowCONNECT 443 {% endif %}
        {% if a.0.isWildCard or a.0.hasHeaderHost %}ProxyPreserveHost On{% endif %}
        {% if a.0.remote_proxy_SSLProxyMachineCertificateFile %}SSLProxyMachineCertificateFile {{ a.0.remote_proxy_SSLProxyMachineCertificateFile }}{% endif %}
        {% if a.0.remote_proxy_SSLProxyCACertificateFile %}SSLProxyCACertificateFile {{ a.0.remote_proxy_SSLProxyCACertificateFile }} {% endif %}
        {% if a.0.remote_proxy_SSLProxyCARevocationFile %}SSLProxyCARevocationFile  {{ a.0.remote_proxy_SSLProxyCARevocationFile }} {% endif %}
        {% if a.0.remote_proxy_SSLProxyVerify %} SSLProxyVerify {{ a.0.remote_proxy_SSLProxyVerify }}{% endif %}
        {% if a.0.cache_activated %}
            #CacheEnable {{ a.0.cache_type }} /
            CacheDefaultExpire {{ a.0.cache_default_exptime }}
            {% if a.0.cache_disable != "" %}CacheDisable {{ a.0.cache_disable }}{% endif %}
            CacheIgnoreCacheControl {% if a.0.cache_ignore_cache_control %} on {% else %} off {% endif %}
            CacheIgnoreHeaders {% if a.0.cache_ignore_headers %} on {% else %} off {% endif %}
            CacheIgnoreNoLastMod {% if a.0.cache_ignore_nolastmod %} on {% else %} off {% endif %}
            CacheIgnoreQueryString {% if a.0.cache_ignore_querystring %} on {% else %} off {% endif %}
            CacheIgnoreURLSessionIdentifiers {{ a.0.cache_ignore_URLSessionIdentifiers }}
            CacheLastModifiedFactor {{ a.0.cache_last_modified_factor }}
            {% if a.0.cache_lock %}CacheLock on
            CacheLockPath {{ a.0.cache_lock_path }}
            CacheLockMaxAge {{ a.0.cache_lock_maxage }}
            {% else %}CacheLock off
            {% endif %}
            CacheMaxExpire {{ a.0.cache_max_expire }}
            CacheStoreNoStore {% if a.0.cache_store_no_store %} on {% else %} off {% endif %}
            CacheStorePrivate {% if a.0.cache_store_private %} on {% else %} off {% endif %}
        {% endif %}
        {% if intf.cert %} #### SSL Configuration for {{intf.name }} #####
            SSLEngine               On
            PerlModule              Apache::SSLLookup
            {% if intf.ssl_engine %}SSLCryptoDevice {{ intf.ssl_engine }} {% endif %}
            SSLCertificateKeyFile   {{ VultureConfPath }}{{ intf.id }}.key
            SSLCertificateFile      {{ VultureConfPath }}{{ intf.id }}.crt
            {% if intf.ca %}SSLCertificateChainFile {{ VultureConfPath }}{{ intf.id }}.chain {%endif%}
            {% if intf.cacert %}SSLCACertificateFile {{ VultureConfPath }}{{ intf.id}}.cacrt{% endif %}
            SSLOptions              +StdEnvVars
            SSLProtocol -ALL +SSLv3 +TLSv1
        {% endif %}
        SetHandler perl-script
        <Location />
            PerlAuthenHandler Core::AuthenHandler
            PerlAuthzHandler  Core::AuthzHandler
            AuthType basic
            AuthName "Please Authenticate"
            Require valid-user
            {% if a.0.auth.is_ssl %}{{ a.0.auth.get_constraint|safe }}{% endif %}
        </Location>
        {% if intf.hasBlackIp %}PerlPreConnectionHandler Core::PreConnectionHandler{% endif %}
        PerlTransHandler Core::TransHandlerv2
        PerlFixupHandler Core::FixupHandler 
        PerlResponseHandler Core::ResponseHandlerv2
        ProxyRequests Off
        ProxyVia Off
        {% if a.0.getJKDirective %}
            {% for dir in a.0.getJKDirective %}
                {{ dir }}
            {% endfor %}
            {% with a.0.auth as auth %}
                {% if auth.is_ssl %}
                    {% with a.0.name|mysplit:"/" as parts %}
                        SSLCACertificateFile {{ VultureConfPath }}{{ intf.id }}-{{ parts.0 }}.ca
                    {% endwith %}
                    SSLVerifyClient {{ auth.get_require }}
                    SSLVerifyDepth 1
                {% endif %}
            {% endwith %}
            {%if a.0.virtualhost_directives%}##### Custom directives for {{a.0.name}} ####
            {{ a.0.virtualhost_directives|safe }} {%endif%}
        {% else %}
{% for app in a %}
            {% with app.auth as auth %}
                {% if auth.is_ssl %}
                    {% with app.name|mysplit:"/" as parts %}
                    SSLCACertificateFile {{ VultureConfPath }}{{ intf.id }}-{{ parts.0 }}.ca
                {% endwith %}
                {% endif %}
            {% endwith %}
        {% if app.Balancer_Activated %} <proxy {{ app.Balancer_Name }}>
                {% with app.Balancer_Node|mysplitbalancer:";" as Nodes %}
                        {% for Node in Nodes %}
                                BalancerMember {{ Node }}
                        {% endfor %}
                {% endwith %}
                ProxySet lbmethod={{ app.Balancer_Algo }}
        </proxy> {% endif %}
        {% if "/" in app.name %}{% with app.name|mysplit:"/" as parts %}
        {% if app.cache_activated %}CacheEnable {{ app.cache_type }} /{{ parts.1 }} {% endif %}
        ProxyPass        /{{ parts.1 }}/ {{app.url}} {% if app.Balancer_Stickyness %}stickysession={{ app.Balancer_Stickyness }} nofailover=Off {% endif %}
        <location /{{ parts.1 }}/ >
            ProxyPassReverse /
        {% endwith %}{% else %}
            {% if app.cache_activated %} CacheEnable {{ app.cache_type }} / {% endif %}
            ProxyPass        / {{ app.url }}/ {% if app.Balancer_Activated %}stickysession={{ app.Balancer_Stickyness }} nofailover=Off {% endif %}
            ProxyPassReverse / {{ app.url }}/
        {% endif %}
            {% if app.hasBlackIp %}
               PerlAccessHandler Core::AccessHandler
            {% endif %}
            {% if app.MS_Activated %}
            SecWebAppId {{ app.name }}
            SecAuditLog {{ app.log.dir|safe }}Vulture-{{ app.name|cut:"/" }}-security_log
            Include  {{ VultureConfPath }}security-rules/activated/{{ app.name|cut:"/" }}/vulture-{{ app.name|cut:"/" }}.conf
            Include  {{ VultureConfPath }}security-rules/activated/{{ app.name|cut:"/" }}/modsec*.conf
            {% endif %}
            {{ app.getCookieDomain }}
            {{ app.getCookiePath }}
           
            {%if app.virtualhost_directives%}##### Custom directives for {{name}} ####
            {{ app.virtualhost_directives|safe }} {%endif%}
            {% if app.deflate_activated %} 
            # Mod_deflate config
            {% if app.deflate_types %}AddOutputFilterByType DEFLATE {{ app.deflate_types }}{% else %}SetOutputFilter DEFLATE{% endif %}
            DeflateBufferSize       {{app.deflate_buf_size}} 
            DeflateCompressionLevel {{app.deflate_compression}}
            DeflateMemLevel         {{app.deflate_memory}}
            DeflateWindowSize       {{app.deflate_win_size}}{% endif %}
        {% if "/" in app.name %}</location> {% endif %}
        {% if app.auth.is_ssl %}
        SSLVerifyClient {{ app.auth.get_require }}
        SSLVerifyDepth 1 {% endif %}
{% endfor %}
        <Proxy *>
            SetHandler perl-script
    </Proxy>
        {% endif %}
</VirtualHost>
{% endfor %}
